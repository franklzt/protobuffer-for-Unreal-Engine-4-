import "MessageBase.proto";

package King.Message;

message MsgC2LAccountLogin
{   
    enum eAccountType
    {
        eAccountType_Guest = 0;
        eAccountType_Bind  = 1;
        eAccountType_UC    = 10; // UC
        eAccountType_MI    = 11; // MI
        eAccountType_YJ    = 12; // YJ
        eAccountType_360   = 13; // 360
        eAccountType_YYB   = 14; // YYB
        eAccountType_ios   = 41; // ios
    }

    required sint32 type = 1;
    required string account_name = 3;
    optional string password = 4;
    required sint32 version = 5;
    optional uint32 code = 6;
    optional string channel = 7;
}

message MsgL2CAckAccountLogin
{
    enum eLoginResult
    {
        R_SUCCESS = 0;              // 成功
        R_ACCOUNT_NOT_EXIST = 1;    // 账号不存在
        R_PASSWORD_ERROR = 2;       // 账号或密码错误
        R_SYSTEM_ERROR = 3;         // 系统错误        
        R_LOSTLOGINSESSIONINFO = 4; // 丢失LoginSession信息
        R_ACCOUNTNOACTIVATION = 5;  // 账号未激活
        R_ACCOUNTBLOCK = 6;         // 账号冻结
        R_LOSTONLINEDATA = 7;       // Online表数据丢失
        R_SAMEACCOUNTBEKICK = 8;    // 被其他账号踢出
        R_MAXLOGINSIZE = 9;         // 最大登录数
        R_SAMEACCOUNTLOGINED = 10;   // 已经账号登录
        R_VERSIONERROR = 11;         // 版本错误
        R_STATUSERROR = 12;          // 状态错误
    }

    required eLoginResult result = 1 [default = R_SUCCESS];
    optional uint32 account_id = 2;
    optional bytes name = 3;
    optional bytes account_id_str = 4;
    optional bytes nick_name = 5;
}

message MsgL2CGiveGateInfo
{
    required uint32 account_id = 1;
    optional string ip = 2;
    optional uint32 port = 3;
    optional string session_key = 4;
}

message MsgC2LAckGiveGateInfo
{
}

message MsgC2LGetGuestAccount
{
    optional string info = 1; // 收集一点用户机器公共信息 作为辨识
}

message MsgL2CAckGuestAccount
{    
    enum eResult
    {
        R_SUCCESS = 0;      // 成功
        R_SYSTEM_ERROR = 1; // 系统错误
        R_GET_FAIL = 2;     // 获取失败
    }
    
    required eResult result = 1[default=R_SUCCESS];
    optional string account_name = 2;
    optional string password = 3;
}

message MsgL2CUpdateTurnInfo
{
    required uint32 position = 1;
}

message MsgC2LAccountSignIn
{
    required string account_name = 1;
    required string password = 2;
    optional sint32 sex = 3;
    optional string mail = 4;
}

message MsgL2CAckAccountSignIn
{   
    enum eSignInResult
    {
        R_SUCCESS = 0;
        R_ACCOUNTEXISTS = 1;
        R_ACCOUNTILLEGAL = 2;
    }

    required eSignInResult result = 1 [default=R_SUCCESS];
    optional string account_name = 2;
    optional string password = 3;
}

message MsgC2LReqBindAccount
{
    required sint32 bind_type = 1;
    required string bind_account = 2;
    required string bind_password = 3;
    required string guest_account = 4;
    required string guest_password = 5;
}

message MsgL2CAckBindAccount
{
    enum eBindResult
    { // 错误码和数据库返回对应
        R_SUCCESS = 0; // 成功
        R_SYSTEM_ERROR = 1; // 系统错误

        R_GUEST_ACCOUNT_NOT_EXIST = 2; // Guest账号不存在
        R_GUEST_ACCOUNT_PASSWORD_ERROR = 3; // Guest账号密码错误        
        R_GUEST_ACCOUNT_HAVE_BIND = 4; // 游客账号已经被其他账号绑定
        R_BIND_ACCOUNT_NOT_EXIST = 5; // Bind账号不存在        
        R_BIND_ACCOUNT_PASSWORD_ERROR = 6; // Bind账号密码错误        
        R_BIND_ACCOUNT_HAVE_BIND = 7; // 已经绑定其他账号
        R_BIND_ACCOUNT_HAVE_REGISTER = 8; // 绑定账号已经存在
    }

    required eBindResult result = 1 [default=R_SUCCESS];
    optional sint32 bind_type = 2;
    optional string bind_account = 3;
    optional string bind_password = 4;
    optional string guest_account = 5;
    optional string guest_password = 6;
}